---
# - name: test
#   ping:

# - name: add link to nodejs
#   command: "ln /usr/bin/nodejs /usr/bin/node"
#   ignore_errors: True

- name: Install dependencies
  apt: name={{ item }} state=latest
  with_items:
    - sudo
    - haveged
    - unzip
    - openjdk-7-jre
    - node
    - npm
    - lsof
    - locales

- name: remove java 6
  apt: name={{ item }} state=absent
  with_items:
    - openjdk-6-jre
    - openjdk-6-jre-lib

#UTF-8 stuff
- name: Add UTF8 locale
  command: "locale-gen --purge en_US.UTF-8"

- name: Make utf8 available
  lineinfile:
  args:
    dest: /etc/locale.gen
    regexp: "^#.*en_US.UTF-8 UTF-8"
    line: "en_US.UTF-8 UTF-8"

- name: reconfigure locales
  command: "dpkg-reconfigure --frontend=noninteractive locales"

- name: Set default lang
  lineinfile:
  args:
    dest: /etc/default/locale
    regexp: "^LANG="
    line: "LANG=en_US.UTF-8"

- name: Set default language
  lineinfile:
  args:
    dest: /etc/default/locale
    regexp: "^LANGUAGE="
    line: "LANGUAGE=en_US:en"

- name: update locales
  command: "update-locale LANG=en_US.UTF-8"
    
- name: Add a new user
  user:
  args:
    name: "{{ proxyuser }}"
    shell: "/bin/bash"

- name: Check if CeNo exists
  become: yes
  become_user: "{{ proxyuser }}"
  stat:
  args:
    path: "/home/{{ proxyuser }}/CENORSSInserter/"
  register: ceno_stat

# - name: Check if CeNo is running
#   become_user: "{{ proxyuser }}"
#   wait_for: 
#   args:
#     port: 8888
#     timeout: 1 
#   register: ceno_running
#   ignore_errors: True
#   when: ceno_exists
  
- name: Stop CeNo if it is running
  become: yes
  become_user: "{{ proxyuser }}"
  command: "/home/{{ proxyuser }}/CENORSSInserter/run.sh stop"
  args:
    chdir: "/home/{{ proxyuser }}/CENORSSInserter/"
  ignore_errors: True
  when: ceno_stat.stat.exists

- name: Remove any existing copies of Ceno
  file:
  args:
    path: "/home/{{ proxyuser }}/CENORSSInserter/"
    state: absent
  
- name: Copy across CENO bundle
  become: yes
  become_user: "{{ proxyuser }}"
  copy:
  args:
    src: "CENORSSInserter.zip"
    dest: "/home/{{ proxyuser }}/CENORSSInserter.zip"

- name: Extract CENO
  become: yes
  become_user: "{{ proxyuser }}"
  command: "unzip CENORSSInserter.zip"
  args:
    chdir: "/home/{{ proxyuser }}/"

- name: Creates resource directory
  become: yes
  become_user: "{{ proxyuser }}"
  file:
  args:
    path: "/home/{{ proxyuser }}/CENORSSInserter/resources"
    state: directory

- name: Copy master bridge ref
  become_user: "{{ proxyuser }}"
  become: yes
  copy:
  args:
    src: "sig_bridges_ref.txt"
    dest: "/home/{{ proxyuser }}/CENORSSInserter/resources/bridgeref.txt"

- name: copy subfeed list
  become_user: "{{ proxyuser }}"
  become: yes
  copy:
  args:
    src: "subfeedlist_{{ inventory_hostname }}.txt"
    dest: "/home/{{ proxyuser }}/CENORSSInserter/feedlist.txt"

- name: check if the reader is running
  become_user: "{{ proxyuser }}"
  command: "pgrep reader >/dev/null"
  ignore_errors: True
  register: reader_is_running

# - name: check result
#   debug: var=reader_is_running
- name: kill the rss reader if running
  become_user: "{{ proxyuser }}"
  become: yes
  command: "pkill reader"
  ignore_errors: True
  when: reader_is_running

- name: Run CENO bridge
  become_user: "{{ proxyuser }}"
  become: yes
  command: "/home/{{ proxyuser }}/CENORSSInserter/CENORSSInserter.sh"
  args:
    chdir: "/home/{{ proxyuser }}/CENORSSInserter/"

# - name: Wait for bridge to publish its descriptor
#   become_user: "{{ proxyuser }}"
#   become: yes
#   wait_for: timeout=60
#   args:
#     path: "/home/{{ proxyuser }}/CENORSSInserter/resources/myref.txt"
# # notify:
# #   fetch descriptor

# - name: fetch descriptor
#   become_user: "{{ proxyuser }}"
#   become: yes
#   fetch:
#   args:
#     dest: "refs/{{ inventory_hostname }}"
#     src: "/home/{{ proxyuser }}/CENORSSInserter/resources/myref.txt"
#     flat: yes

- name: add bundle server cron job
  become_user: "{{ proxyuser }}"
  become: yes
  cron:
  args:
    name: "keep bundler server alive"
    job: "lsof -i :3094 | grep LISTEN || /home/amnesia/CENORSSInserter/run-bundle-server.sh"
  #job: "if ! /usr/bin/pgrep node >/dev/null; then /home/amnesia/CENORSSInserter/run-bundle-server.sh; fi"

- name: add ceno log cron job
  become_user: "{{ proxyuser }}"
  become: yes
  cron:
  args:
    name: "ceno log"
    minute: 0
    job: "cat /home/amnesia/CENORSSInserter/logs/freenet-previous.log | grep CENO | grep -v RGA | grep -v re-running >> /home/amnesia/CENORSSInserter/logs/CENO.log"

- name: wait for bundler
  become_user: "{{ proxyuser }}"
  become: yes
  wait_for:
  args:
    port: 3094

- name: run rss reader
  become_user: "{{ proxyuser }}"
  become: yes
  shell: "( ( nohup ./reader 1>../CENO.log 2>&1 ) & )"
  args:
    chdir: "/home/{{ proxyuser }}/CENORSSInserter/rss-reader/"

- name: wait for reader
  become_user: "{{ proxyuser }}"
  become: yes
  wait_for:
  args:
    port: 3096

- name: run the follower
  become_user: "{{ proxyuser }}"
  become: yes
  shell: "( ( sleep 1; nohup ./follower ../feedlist.txt 1 1>../CENO.log 2>&1 ) & )"
  async: 5
  poll: 0
  args:
    chdir: "/home/{{ proxyuser }}/CENORSSInserter/rss-reader/"

#  # - name: Read backbone descriptor
#  #   sudo: true
#  #   sudo_user: "{{ proxyuser }}"
#  #   slurp:
#  #   args:
#  #     src: "/home/{{ proxyuser }}/CENOBox/resources/myref.txt"
#  #   register: ceno_backbone_refence

#  #  - name: Add descriptor to db
#  #    host: local
#  #    lineinfile:
#  #    args:
#  #      dest=bridgeref.txt
#  #      line=
        
  
   